Q1) Write a program that takes a command-line argument n and prints a table of the powers of 2 that are less than or equal to 2^n.
-->
#! /bin/bash -x

#for (( inialize;condition;increment/decrement))
#do
#actions to be performed in the loop
#done
read -p "Enter a number:" Number
for ((counter=1;counter<=Number;counter++))
do
        expr=$((2**$counter))
        echo $expr
done

output:
ASUS@LAPTOP-58MEKRN6 MINGW64 ~/Desktop/TerminalCommands/programrepetation
$ ./testfor2
+ read -p 'Enter a number:' Number
Enter a number:5
+ (( counter=1 ))
+ (( counter<=Number ))
+ expr=2
+ echo 2
2
+ (( counter++ ))
+ (( counter<=Number ))
+ expr=4
+ echo 4
4
+ (( counter++ ))
+ (( counter<=Number ))
+ expr=8
+ echo 8
8
+ (( counter++ ))
+ (( counter<=Number ))
+ expr=16
+ echo 16
16
+ (( counter++ ))
+ (( counter<=Number ))
+ expr=32
+ echo 32
32
+ (( counter++ ))
+ (( counter<=Number ))

Q2)Q)Write a program that takes a command-line argument n and prints the nth harmonic number. 
-->
 1 #! /bin/bash -x
 2
 3 #for (( inialize;condition;increment/decrement))
 4 #do
 5 #actions to be performed in the loop
 6 #done
 7 harmonic=1
 8 read -p "Enter a nth Harmonic number:" Hn
 9 for (( counter=1;counter<$Hn;counter++ ))
10 do
11         harmonic=$(( $harmonic + 1/$counter ))
12         echo $harmonic
13 done
14 echo Harmonic number at $n th  place is $harmonic
15
output:
ASUS@LAPTOP-58MEKRN6 MINGW64 ~/Desktop/TerminalCommands/programrepetation
$ ./testforharmonic
+ harmonic=1
+ read -p 'Enter a nth Harmonic number:' Hn
Enter a nth Harmonic number:5
+ (( counter=1 ))
+ (( counter<5 ))
+ harmonic=2
+ echo 2
2
+ (( counter++  ))
+ (( counter<5 ))
+ harmonic=2
+ echo 2
2
+ (( counter++  ))
+ (( counter<5 ))
+ harmonic=2
+ echo 2
2
+ (( counter++  ))
+ (( counter<5 ))
+ harmonic=2
+ echo 2
2
+ (( counter++  ))
+ (( counter<5 ))
+ echo Harmonic number at th place is 2
Harmonic number at th place is 2

Q3)Q) Write a program that takes a input and determines if the number is a prime.
-->
#! /bin/bash -x
flag=0
read -p "Enter the number:" number
for (( index=2; index<=number/2; index++ ))
do
        if [ $(( number%index )) -eq 0 ]
        then
                flag=1
        fi
done

if [ $flag -eq 1 ]
then
        echo $number "is not prime"
else
        echo $number "is a prime number"
fi
output:
$ ./testforprime
+ flag=0
+ read -p 'Enter the number:' number
Enter the number:6
+ (( index=2 ))
+ (( index<=number/2 ))
+ '[' 0 -eq 0 ']'
+ flag=1
+ (( index++  ))
+ (( index<=number/2 ))
+ '[' 0 -eq 0 ']'
+ flag=1
+ (( index++  ))
+ (( index<=number/2 ))
+ '[' 1 -eq 1 ']'
+ echo 6 'is not prime'
6 is not prime

ASUS@LAPTOP-58MEKRN6 MINGW64 ~/Desktop/TerminalCommands/programrepetation
$ ./testforprime
+ flag=0
+ read -p 'Enter the number:' number
Enter the number:7
+ (( index=2 ))
+ (( index<=number/2 ))
+ '[' 1 -eq 0 ']'
+ (( index++  ))
+ (( index<=number/2 ))
+ '[' 1 -eq 0 ']'
+ (( index++  ))
+ (( index<=number/2 ))
+ '[' 0 -eq 1 ']'
+ echo 7 'is a prime number'
7 is a prime number

Q4)Extend the program to take a range of number as input and output the Prime Numbers in that range.
-->
 #! /bin/bash -x
 2 flag=1
 3 read -p "Enter a range of start number:" start
 4 read -p "Enter a range of last number:" last
 5 for (( index=start; index<last; index++ ))
 6 do
 7         for (( counter=2; counter<=index/2; counter++ ))
 8         do
 9         if [ $(( $index % $counter )) -eq 0 ]
10         then
11                 flag=0
12                 break
13         else
14                 flag=1
15         fi
16         done
17
18 if [ $(($flag)) -eq 1 ]
19 then
20         echo $index
21 fi
22 done

output:
ASUS@LAPTOP-58MEKRN6 MINGW64 ~/Desktop/TerminalCommands/programrepetation
$ ./testforprimerange
+ flag=1
+ read -p 'Enter a range of start number:' start
Enter a range of start number:10
+ read -p 'Enter a range of last number:' last
Enter a range of last number:20
+ (( index=start ))
+ (( index<last ))
+ (( counter=2 ))
+ (( counter<=index/2 ))
+ '[' 0 -eq 0 ']'
+ flag=0
+ break
+ '[' 0 -eq 1 ']'
+ (( index++  ))
+ (( index<last ))
+ (( counter=2 ))
+ (( counter<=index/2 ))
+ '[' 1 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 2 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 3 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 1 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 1 -eq 1 ']'
+ echo 11
11
+ (( index++  ))
+ (( index<last ))
+ (( counter=2 ))
+ (( counter<=index/2 ))
+ '[' 0 -eq 0 ']'
+ flag=0
+ break
+ '[' 0 -eq 1 ']'
+ (( index++  ))
+ (( index<last ))
+ (( counter=2 ))
+ (( counter<=index/2 ))
+ '[' 1 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 1 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 1 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 3 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 1 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 1 -eq 1 ']'
+ echo 13
13
+ (( index++  ))
+ (( index<last ))
+ (( counter=2 ))
+ (( counter<=index/2 ))
+ '[' 0 -eq 0 ']'
+ flag=0
+ break
+ '[' 0 -eq 1 ']'
+ (( index++  ))
+ (( index<last ))
+ (( counter=2 ))
+ (( counter<=index/2 ))
+ '[' 1 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 0 -eq 0 ']'
+ flag=0
+ break
+ '[' 0 -eq 1 ']'
+ (( index++  ))
+ (( index<last ))
+ (( counter=2 ))
+ (( counter<=index/2 ))
+ '[' 0 -eq 0 ']'
+ flag=0
+ break
+ '[' 0 -eq 1 ']'
+ (( index++  ))
+ (( index<last ))
+ (( counter=2 ))
+ (( counter<=index/2 ))
+ '[' 1 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 2 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 1 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 2 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 5 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 3 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 1 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 1 -eq 1 ']'
+ echo 17
17
+ (( index++  ))
+ (( index<last ))
+ (( counter=2 ))
+ (( counter<=index/2 ))
+ '[' 0 -eq 0 ']'
+ flag=0
+ break
+ '[' 0 -eq 1 ']'
+ (( index++  ))
+ (( index<last ))
+ (( counter=2 ))
+ (( counter<=index/2 ))
+ '[' 1 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 1 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 3 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 4 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 1 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 5 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 3 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 1 -eq 0 ']'
+ flag=1
+ (( counter++  ))
+ (( counter<=index/2 ))
+ '[' 1 -eq 1 ']'
+ echo 19
19
+ (( index++  ))
+ (( index<last ))

Q5) Write a program that computes a factorial of a number taken as input.
-->
#! /bin/bash -x

#for (( inialize;condition;increment/decrement))
#do
#actions to be performed in the loop
#done
read -p "Enter a number:" number
factorial=1
for (( counter=2;counter<=number;counter++ ))
do
        factorial=$(( $factorial * $counter ))
done
echo "factorial number of " $number "is" $factorial
output:
ASUS@LAPTOP-58MEKRN6 MINGW64 ~/Desktop/TerminalCommands/programrepetation
$ ./testforfactorial
+ read -p 'Enter a number:' number
Enter a number:5
+ factorial=1
+ (( counter=2 ))
+ (( counter<=number ))
+ factorial=2
+ (( counter++  ))
+ (( counter<=number ))
+ factorial=6
+ (( counter++  ))
+ (( counter<=number ))
+ factorial=24
+ (( counter++  ))
+ (( counter<=number ))
+ factorial=120
+ (( counter++  ))
+ (( counter<=number ))
+ echo 'factorial number of ' 5 is 120
factorial number of  5 is 120

